{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An Expandable dynamic object for .NET 4.0 +","google":"","name":"Elasticobject","body":"# ElasticObject #\r\n\r\nElasticObject is a multi level dynamic object implementation using .NET 4.0 dynamic features, for fluent access of data types like XML. \r\n\r\nFor example, consider the XML \r\n\r\n> &lt;entry name=\"user\"/&gt; \r\n\r\nOne possible use of ElasticObject is, you can access the same using fluent dynamic wrappers, like \r\n\r\n> var n=entry.name; \r\n\r\nYou can also use it like ExpandoObject, with multi level property support. To start with, here are few scenarios you can use ElasticObject\r\n\r\n* An easier, fluid way to work with data formats – like XML and JSON. Presently, we’ve some support for XML.\r\n* Cleaner code though it is duck typed\r\n* A hierarchical way to maintain loosely typed data.\r\n\r\n\r\n###How to use ElasticObject###\r\n\r\nYou can create dynamic objects with multiple levels of properties. ElasticObject has got its own conventions ;)\r\n\r\n```c#\r\n    dynamic CreateStoreObject()\r\n        {\r\n            dynamic store = new ElasticObject(\"Store\");\r\n            store.Name = \"Acme Store\";\r\n            store.Location.Address = \"West Avenue, Heaven Street Road, LA\";\r\n            store.Products.Count = 2;\r\n\r\n            store.Owner.FirstName = \"Jack\";\r\n            store.Owner.SecondName = \"Jack\";\r\n\r\n            //try to set the internal content for an element\r\n            store.Owner <<= \"this is some internal content for owner\";\r\n\r\n            //Add a new product\r\n            var p1 = store.Products.Product();\r\n            p1.Name = \"Acme Floor Cleaner\";\r\n            p1.Price = 20;\r\n\r\n            //Add another product\r\n            var p2 = store.Products.Product();\r\n            p2.Name = \"Acme Bun\";\r\n            p2.Price = 22;\r\n\r\n            return store;\r\n\r\n        }\r\n```\t\t\r\n\r\nNow, you can convert this to XML quite easily, using the > operator. You can convert the XML back to elasticobject as well. See below.\r\n\r\n```c#\r\n            var store = CreateStoreObject();\r\n            XElement el = store > FormatType.Xml;\r\n            dynamic storeClone = el.ToElastic();\r\n            XElement elCopy = storeClone > FormatType.Xml;\r\n            Assert.AreEqual(el.ToString(), elCopy.ToString());\r\n```\r\n\t\t\t\r\nSee the unit tests for more examples.\t\t\t\r\n\r\n\r\n### Using ElasticObject for traversing XML ###\r\n\r\nIt is pretty easy to use ElasticObject to traverse XML. For example, here is a Console client that gets my Twitter timeline as XML, and print some properties.\r\n\r\nNote the ToElastic extension method available for converting XElements to an ElasticObject\r\n\r\n```c#\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var cl=new WebClient();\r\n            Console.WriteLine(\"Reading public time line\");\r\n            using (var r = new StreamReader\r\n                (cl.OpenRead(@\"http://twitter.com/statuses/user_timeline/amazedsaint.xml\")))\r\n            {\r\n                var data = r.ReadToEnd();\r\n                IterateTweets(data);\r\n            }\r\n            Console.ReadLine();\r\n\r\n        }\r\n\r\n        static void IterateTweets(string data)\r\n        {\r\n            dynamic root = XElement.Parse(data).ToElastic();\r\n            foreach (var s in root[\"status\"])\r\n            {\r\n                Console.WriteLine(~s.user.screen_name + \" - \" + ~s.text);\r\n                Console.WriteLine();\r\n            }\r\n        }\r\n    }\r\n\t\r\n```\t\r\n\t\t\t\r\n\r\n\r\n### Using ElasticObject for XML driven T4 Code generation in Visual Studio ###\r\n\r\nYou can use ElasticObject to generate code using T4 from simple XML files. To install AmazedSaint.ElasticObject package from nuget, run the following command in the Package Manager Console\r\n\r\n> Install-Package AmazedSaint.ElasticObject\r\n\r\nOr you can install this via the Nuget Package manager, it is your choice. See the example once you install the package.\r\n\r\n### More ###\r\n\r\n* [Introduction To ElasticObject] (http://www.amazedsaint.com/2010/02/introducing-elasticobject-for-net-40.html)\r\n* [XML driven Code Generation using T4 and ElasticObject] (http://www.amazedsaint.com/2012/02/xml-driven-ct4-code-generation-with.html)\r\n"}